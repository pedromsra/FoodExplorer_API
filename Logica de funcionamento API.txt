Database:

    user (adm and customer): name, email, password (min 6 characters), role, adress, savedPayment, favorites*, order*

    Meal: type, title, description, price, ingredients*

    ingredients: name, meal_id

    favorites: user_id, meal_id ( if match, favorite, if not, notfavorite )

    order: user_id, comments, meals (array [{meal_id, quantity}])

    meals: an array {user_id, meal_id, quantity} saved in localstorage that will save the order in a row of the order table after confirm order

    sessions: save the authentication token of the user login in the local storage

    *payment (pix, debito e credito), how? I'll use PagSeguro API, the API cobrança and the API Pix

Actions:

    Usuário comum:

    > SignUp(create user)/SignIn(create session)/SignOut(delete session)/UpdateProfile(update user)/CancelAccount(delete user)

    > CreateOrder(after confirm)/ShowOrder(in the page order, to see the order ?status?)/UpdateOrder(to change anything in the order, add or remove)/DeleteOrder(to cancel the order)/OrderHistory(index, to show all previous order from the loged user)

    > FavoriteMeal(create)/UnfavoriteMeal(delete)/ShowFavoritesMeals(index){filter for meal index for user}

    > Add Meal (push an item in the user meals array in the local storage, after order confirmation, the local storage will be deleted and the system will show the order in the page order ?status? if the status be diferent ?pre-confirmed?)/Remove Meal (remove an item in the user meals array in the local storage) {to change the quantity of any meal is necessary to remove first}

    > Payment method API will be a part of the page order

    *** In the mobile first version: is necessary to have a menu for favortes and order history, the order and search function will be an icon and in the case of the search will appear a grid-row in the screen

    Usuário Adm: ***Meal creation will be in the home page, in place of the favorites of the default user

    > SignUp(create user)/SignIn(create session)/SignOut(delete session)/UpdateProfile(update user)/CancelAccount(delete user)

    > CreateMeal(type, price,...)/UpdateMeal/ShowMeal/IndexMeal

Tests:

    > User Tests:
        > User creation;
        > session creation;

    > Order Tests:
        > Order creation;
    
    > MealS Test:
        > Meals saving and removing in the localStorage (test the array creation and manipulation);

    > Payment Tests:
        > Connection with the API;
        > Anything...

    > (Adm) Meal test:
        > Meal creation;

signup>singin>add meal(1und)>create order>configurar pagamento

user: error sempre no controlle, colocar os throw new App error apenas como return de alguma resposta de erro a ser tratada no controller.

signup(create user)>
signin(create sesion)>

compra
    if(cart){update (*creator_update*) LocalStorage} : create meals > add localStorage (meal: meal_id, quatity: 1) [{meal_id, quatity}] meals.push({meal_id,qt}) > "vou ate a pagina do carrinho" > (if pay method and adress) 
    
    (backend) create order >

    > return 201 body: {order: user_id, meals, created_at, status(pedido realizado, aprovado no cartao, na cozinha, em entrega, entregue) -> deve ser definido em código que os valores só podem ser um desses definidos *enum*}
        (front end) delete localStorage
        (front end) atualizar parte da pagina indicando que o pedido está na cozinha...

    > return erro



